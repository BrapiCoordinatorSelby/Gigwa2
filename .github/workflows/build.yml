name: Gigwa Build

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Java
      uses: actions/setup-java@v3.13.0
      with:
        distribution: 'zulu'
        java-version: 17
    - name: Run build script
      run: |
        wget https://raw.githubusercontent.com/${{ github.repository }}/master/misc/build.sh
        chmod +x build.sh
        ./build.sh -P prod
    - name: Grep release version
      id: grep_release_version
      run: |
        # RESULT=$(grep -m 1 project\\\.version ${{ github.event.repository.name }}/pom.xml | sed -n 's/.*<project\.version>\(.*\)<\/project\.version>.*/\1/p')
        echo "release_version=$(grep -m 1 project\\\.version ${{ github.event.repository.name }}/pom.xml | sed -n 's/.*<project\.version>\(.*\)<\/project\.version>.*/\1/p')" >>$GITHUB_OUTPUT
      shell: bash
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.grep_release_version.outputs.release_version }}"
        release_name: "${{ steps.grep_release_version.outputs.release_version }}"
        draft: false
        prerelease: false
    - name: Copy additional release files
      run: |
        cp ${{ github.event.repository.name }}/misc/linux_bundle.sh $GITHUB_WORKSPACE
        cp ${{ github.event.repository.name }}/misc/macos_bundle.command $GITHUB_WORKSPACE
        cp ${{ github.event.repository.name }}/misc/win_bundle.ps1 $GITHUB_WORKSPACE
        # echo $GITHUB_WORKSPACE
        # ls -la $GITHUB_WORKSPACE
        tree
    - name: Upload Main Release Asset (webapp zip)
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: $GITHUB_WORKSPACE/target/Gigwa_V${{ steps.grep_release_version.outputs.release_version }}_Webapp.zip
        asset_name: Gigwa_V${{ steps.grep_release_version.outputs.release_version }}_Webapp.zip
        asset_content_type: application/zip
    - name: Upload Additional Release Assets (bundle creation scripts)
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: $GITHUB_WORKSPACE/linux_bundle.sh
        asset_name: linux_bundle.sh
        asset_content_type: application/x-sh
    # - name: Upload Additional Release Assets (bundle creation scripts)
    #   id: upload-release-assets
    #   uses: actions/upload-release-asset@v1.0.2
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: |
    #       ${{ github.event.repository.name }}/misc/linux_bundle.sh
    #       ${{ github.event.repository.name }}/misc/macos_bundle.command
    #       ${{ github.event.repository.name }}/misc/win_bundle.ps1
    #     asset_name: |
    #       linux_bundle.sh
    #       macos_bundle.command
    #       win_bundle.ps1
    #     asset_content_type: |
    #       application/x-sh
    #       application/x-sh
    #       application/powershell
